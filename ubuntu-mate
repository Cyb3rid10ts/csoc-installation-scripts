#!/bin/bash
#
# Installs dionaea on ubuntu mate
#
# Put this script into a file named dio.sh
#
# chmod +x dio.sh
# run using ./dio.sh
#
#
echo "Started setup script on" `date`  >~/SETUP-RUN.TXT
chmod 0660 SETUP-RUN.TXT
echo "-----@ SET TIMEZONE -----" >>~/SETUP-RUN.TXT
sudo cp /usr/share/zoneinfo/Canada/Eastern /etc/localtime
#
echo "-----@ LATEST SOFTWARE UPDATES -----" >>~/SETUP-RUN.TXT
sudo apt-get -y update
sudo apt-get -y dist-upgrade
sudo apt-get -y update --fix-missing 
sudo apt-get install -y git
sudo apt-get install -y autogen autoconf libtool
sudo apt-get install -y make
sudo apt-get install -y pkg-config
sudo apt-get install -y libglib2.0-dev
sudo apt-get install -y curl
sudo apt-get install -y python3-pip
sudo apt-get install -y build-essential libssl-dev libffi-dev python-dev
sudo apt install -y python-pip
sudo -H pip install Cython
sudo apt-get install -y udns-utils
sudo apt-get install -y libcurl4-openssl-dev
sudo apt-get install -y aptitude
sudo apt-get install -y libemu-dev
sudo apt-get install -y libudns-dev
sudo apt-get install -y libev-dev
sudo apt-get install -y \
    autoconf \
    automake \
    build-essential \
    check \
    cython3 \
    libcurl4-openssl-dev \
    libemu-dev \
    libev-dev \
    libglib2.0-dev \
    libloudmouth1-dev \
    libnetfilter-queue-dev \
    libnl-3-dev \
    libpcap-dev \
    libssl-dev \
    libtool \
    libudns-dev \
    python3 \
    python3-dev \
    python3-yaml 
# remove old directory to do a clean install
if [ -d "/opt/dionaea" ]; then
  echo "Removing old /opt/dionaea directory" >>~/SETUP-RUN.TXT
  sudo rm -rf /opt/dionaea
fi
sudo git clone git://github.com/DinoTools/dionaea.git /opt/dionaea
cd /opt/dionaea
sudo autoreconf -vi
sudo ./configure \
 --disable-werror \
 --prefix=/opt/dionaea \
 --with-python=/usr/bin/python3 \
 --with-cython-dir=/usr/bin \
 --with-ev-include=/usr/include \
 --with-ev-lib=/usr/lib \
 --with-emu-lib=/usr/lib/libemu \
 --with-emu-include=/usr/include \
 --with-nl-include=/usr/include \
 --with-nl-lib=/usr/lib \
 --with-curl-dir=/usr/bin/curl 
sudo make
sudo make install
echo "-----@ DIONAEA SETUP DONE -----" >>~/SETUP-RUN.TXT
#
# the following command should run and display dionaea help 
#
/opt/dionaea/bin/dionaea -H
# 
# uncomment the following line to automatically launch the app
#
# sudo /opt/dionaea/bin/dionaea -p /opt/dionaea/var/dionaea.pid -D
#
# ---------------
# install ossec
# https://ossec.github.io/index.html
#
echo "-----@ INSTALL OSSEC -----" >>~/SETUP-RUN.TXT
cd ~
sudo apt-get -y install build-essential
sudo apt-get -y install mysql-server
wget -U ossec https://bintray.com/artifact/download/ossec/ossec-hids/ossec-hids-2.8.3.tar.gz
tar -zxf ossec-hids-2.8.3.tar.gz
cd ossec-hids-2.8.3
sudo ./install.sh

echo "-----@ OSSEC SETUP DONE -----" >>~/SETUP-RUN.TXT
#
#  need to add script to configure dionaea .cfg file - https://dionaea.readthedocs.io/en/latest/configuration.html
#
#---------------
#
# TODO: setup watchdog timer support for raspberry pi device
#
#echo "-----@ WATCHDOG -----"
#sudo modprobe bcm2708_wdog
#echo "bcm2708_wdog" | sudo tee -a /etc/modules
#sudo apt-get install watchdog
#
# - need to add configuration for watchdog sudo nano /etc/watchdog.conf
#
# Uncomment the line that starts with #watchdog-device by removing the hash (#) to enable the  watchdog daemon to use the watchdog device.
# Uncomment the line that says #max-load-1 = 24 by removing the hash symbol to reboot the device if the load goes over 24 over 1 minute. A load of 25 of one minute means that you would have needed 25 Raspberry Pis to complete that task in 1 minute. You may tweak this value to your liking.
#
#------
#
# install AWS IoT SW
# 
# TODO: install AWS IoT SW 
# TODO: configure AWS IoT SW 
#
#------
#
# CONFIGURE UFW  
#
#------
echo "-----@ UFW CONFIGURATION STARTS -----"  >>~/SETUP-RUN.TXT
sudo ufw disable
sudo ufw --force reset
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw allow ftp
# OSSEC manager listens on UDP port 1514
sudo ufw allow 1514
sudo ufw logging low
sudo ufw enable
sudo ufw status >>~/SETUP-RUN.TXT
echo "-----@ UFW DONE -----" >>~/SETUP-RUN.TXT
#--------
#
# Configure OSSEC
#
# TODO: configure OSSEC
#
#--------
#
# start OSSEC
#
echo "-----@ START OSSEC -----" >>~/SETUP-RUN.TXT
/var/ossec/bin/ossec-control start
#
# provide IP info of configured server
#
echo "IP Addresses of installation"  >>~/SETUP-RUN.TXT
ip addr show | awk '/inet/ {print $2}' >>~/SETUP-RUN.TXT
#echo "IP address of " $HOSTNAME " is " `ifconfig wlan0 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`
#echo "http://"`ifconfig wlan0 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`"/index.html"
# 
#---------------------------
#
# TODO: need to add commands to remove all software not needed after the install, e.g. git, pip
#
#---------------------------
echo "Ended setup script on" `date`  >>~/SETUP-RUN.TXT


