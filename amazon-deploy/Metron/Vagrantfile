#Global Cybersecurity Resource, 2017

#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#a  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


#GCR Metron Note: 2017-11-06
#This Vagrant file should replace/overwrite the Vagrant file in the following directory
#/.../.../metron-master/metron-deployment/vagrant/full-dev-platform/Vagrantfile



#distroy all vagrant vms
# for i in `vagrant global-status | grep virtualbox | awk '{print $1 }'` ; do vagrant destroy $i  ; done

#find ami ids for canada
#pip install awscli
#aws --region ca-central-1 ec2 describe-images --owners aws-marketplace --filters Name=product-code,Values=aw0evgkw8e5c1q413zgy5pjce
#imageIDs: ami-28823e4c, ami-af62d0cb, ami-cbd069af
#

#vagrant plugin install vagrant-aws
#vagrant up --provider=aws

require 'getoptlong'
require 'vagrant-aws'

ansibleTags=''
ansibleSkipTags='sensors,quick_dev'

begin
   opts = GetoptLong.new(
     [ '--ansible-tags', GetoptLong::OPTIONAL_ARGUMENT ],
     [ '--ansible-skip-tags', GetoptLong::OPTIONAL_ARGUMENT ]
   )

   opts.quiet = TRUE

   opts.each do |opt, arg|
     case opt
       when '--ansible-tags'
         ansibleTags=arg
       when '--ansible-skip-tags'
         ansibleSkipTags=arg
     end
   end
rescue Exception => ignored
#Ignore to allow other opts to be passed to Vagrant
end

puts " Running with ansible-tags: " + ansibleTags.split(",").to_s if ansibleTags != ''
puts " Running with ansible-skip-tags: " + ansibleSkipTags.split(",").to_s if ansibleSkipTags != ''

hosts = [{
    hostname: "node1",
    #hostname: "35.182.76.64",
    #ip: "192.168.66.121",
    #ip: "172.31.15.100",
    #ip: "35.182.187.87",
    ip: "35.182.76.64",
    memory: "6000",
    cpus: 4,
    promisc: 2  # enables promisc on the 'Nth' network interface
}]


#installed: vagrant plugin install vagrant-aws
#ran command: vagrant box add aws-dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
#vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
#pip install --upgrade setuptools --user python

Vagrant.configure(2) do |config|

  # all hosts built on centos 6
  config.vm.box = "metron/centos_base"
  config.ssh.insert_key = true

  # enable the hostmanager plugin
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true


  # host definition
  hosts.each_with_index do |host, index|
    config.vm.define host[:hostname] do |node|

      # host settings
      node.vm.hostname = host[:hostname]
      node.vm.network "private_network", ip: host[:ip]

      # vm settings
      node.vm.provider "virtualbox" do |vb|
        vb.memory = host[:memory]
        vb.cpus = host[:cpus]

        # enable promisc mode on the network interface
        if host.has_key?(:promisc)
          vb.customize ["modifyvm", :id, "--nicpromisc#{host[:promisc]}", "allow-all"]
        end
      end
    end
  end

  # provisioning
  #config.vm.provision :ansible do |ansible|
    #ansible.playbook = "../../playbooks/metron_full_install.yml"
    #ansible.sudo = true
    #ansible.tags = ansibleTags.split(",") if ansibleTags != ''
    #ansible.skip_tags = ansibleSkipTags.split(",") if ansibleSkipTags != ''
    #ansible.inventory_path = "../../inventory/full-dev-platform"
  #end
#end


#Vagrant.configure(2) do |config|
 config.vm.provider :aws do |aws, override|
   aws.access_key_id = ENV['AWS_KEY']
   aws.secret_access_key = ENV['AWS_SECRET']
   aws.keypair_name = ENV['AWS_KEYNAME']
   aws.ami = "ami-00e45864"
   aws.region = "ca-central-1"
   #aws.instance_type = "m4.2xlarge" ($0.444) - 8 core 32gig, "m4.xlarge"($0.222) - 4 core 16 gig, t2.2xlarge($0.41), t2.xlarge($0.205)
   aws.instance_type = "t2.2xlarge"
   aws.security_groups = ["sg-11935579"]
   aws.subnet_id = "subnet-fbc3e392"
   aws.elastic_ip = "35.182.76.64"
   #aws.block_device_mapping = [{'DeviceName' =>'/dev/xvda1', 'Ebs.VolumeSize' => 100}]
   override.vm.box = "dummy"
   override.ssh.username = "centos"
   override.ssh.private_key_path = ENV['AWS_KEYPATH']

  #config.vm.provider "aws" do |aws, override|
   override.nfs.functional = false
   aws.tags = {
         'Name' => 'Phase1-MetronA',
         'Organization' => 'GCR',
         'Developer' => 'AS-vagrantTest',
         'Function' => 'MetronInstall'
   }
  # provisioning
   #aws.block_device_mapping = [{'DeviceName' =>'/dev/xvda', 'Ebs.VolumeSize' => 100}]
   aws.block_device_mapping = [{'DeviceName' =>'/dev/sda1', 'Ebs.VolumeSize' => 100}] 
 end 

 config.vm.provision :ansible do |ansible|
   ansible.playbook = "../../playbooks/metron_full_install.yml"
   ansible.verbose ="v"
   ansible.host_key_checking = false
   ansible.limit = 'all'
   ansible.sudo = true
   ansible.tags = ansibleTags.split(",") if ansibleTags != ''
   ansible.skip_tags = ansibleSkipTags.split(",") if ansibleSkipTags != ''
   ansible.inventory_path = "../../inventory/full-dev-platform"
 end


  #end
 #end
end
